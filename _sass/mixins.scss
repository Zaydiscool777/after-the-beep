@mixin outset-border {
    border: 2px solid;
    border-color:
        $window-border-highlight-color
        $window-border-shadow-color
        $window-border-shadow-color
        $window-border-highlight-color;
    border-image: url("outset.gif") 2 stretch;
}

@mixin inset-border {
    border: 2px solid;
    border-color:
        $window-border-shadow-color
        $window-border-highlight-color
        $window-border-highlight-color
        $window-border-shadow-color;
    border-image: url("inset.gif") 2 stretch;
}

@mixin scroll-wrapper {
    $scrollbar-size: 16px;

    overflow: auto;
    scrollbar-color: $scrollbar-handle-color $scrollbar-bg-color;
    scrollbar-width: auto;

    // Chrome 121+ supports scrollbar-color and will disable ::-webkit styles
    // if not "auto"; this disables the color override if styles are supported
    // see https://syntackle.com/blog/changes-to-scrollbar-styling-in-chrome-121/
    @supports #{'selector(::-webkit-scrollbar)'} {
        & { scrollbar-color: auto; }
    }

    &::-webkit-scrollbar {
        width: $scrollbar-size;
        height: $scrollbar-size;
    }
    &::-webkit-scrollbar-button {
        background: $window-bg-color center no-repeat;
        width: $scrollbar-size;
        height: $scrollbar-size;
        @include outset-border;

        &:horizontal:increment {
            background-image: url("arrow-right.gif");
        }
        &:horizontal:decrement {
            background-image: url("arrow-left.gif");
        }
        &:vertical:increment {
            background-image: url("arrow-down.gif");
        }
        &:vertical:decrement {
            background-image: url("arrow-up.gif");
        }
    }
    &::-webkit-scrollbar-thumb {
        background: $window-bg-color;
        @include outset-border;
    }
    &::-webkit-scrollbar-track {
        background: url("track-bg.gif") $scrollbar-bg-color;
    }
    &::-webkit-scrollbar-corner {
        background: $window-bg-color;
    }
}

@mixin party-text($colors, $duration, $stretch, $deflection) {
    $name: str-slice("#{&}", 2);  // remove "." prefix from selector
    $colors: append($colors, nth($colors, 1));  // start and end on same color
    $frame-count: length($colors);

    display: inline-block;

    @keyframes #{$name}-color {
        @for $i from 1 through $frame-count {
            $percent: 100% / ($frame-count - 1) * ($i - 1);
            $color: nth($colors, $i);
            #{$percent} {
                color: $color;
            }
        }
    }

    @keyframes #{$name}-motion {
        0% { transform: translateY(-$deflection); }
        100% { transform: translateY($deflection); }
    }

    animation: $duration linear infinite #{$name}-color,
        ($duration / 2) ease-in-out infinite alternate #{$name}-motion;

    $delay-count: $frame-count * $stretch;
    @for $i from 1 through $delay-count {
        &:nth-child(#{$delay-count}n + #{$i}) {
            animation-delay: -$duration / $delay-count * ($i - 1);
        }
    }
}
